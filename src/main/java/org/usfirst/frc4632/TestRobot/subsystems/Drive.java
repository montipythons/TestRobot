// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4632.TestRobot.subsystems;


import org.usfirst.frc4632.TestRobot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drive extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Talon leftRear;
    private Talon leftFront;
    private SpeedControllerGroup left;
    private Talon rightRear;
    private Talon rightFront;
    private SpeedControllerGroup right;
    private DifferentialDrive tank;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Drive() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftRear = new Talon(1);
        addChild("leftRear",leftRear);
        leftRear.setInverted(false);
        
        leftFront = new Talon(2);
        addChild("leftFront",leftFront);
        leftFront.setInverted(false);
        
        left = new SpeedControllerGroup(leftRear, leftFront  );
        addChild("left",left);
        
        
        rightRear = new Talon(3);
        addChild("rightRear",rightRear);
        rightRear.setInverted(false);
        
        rightFront = new Talon(4);
        addChild("rightFront",rightFront);
        rightFront.setInverted(false);
        
        right = new SpeedControllerGroup(rightRear, rightFront  );
        addChild("right",right);
        
        
        tank = new DifferentialDrive(left, right);
        addChild("tank",tank);
        tank.setSafetyEnabled(true);
        tank.setExpiration(0.1);
        tank.setMaxOutput(1.0);

        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    // Basic Code to move the robot
    public void move(double speed) {

        tank.arcadeDrive(speed, 0);

    }

    // Move Left
    public void moveLeft(double speed, double strength) {

        tank.arcadeDrive(speed*-1.0, strength);

    }

    // Move Left
    public void moveRight(double speed, double strength) {

        tank.arcadeDrive(speed, strength);

    }

    // Move Left
    public void rotateLeft(double speed, double strength) {

        tank.arcadeDrive(speed*-1.0, strength);

    }

    // Move Left
    public void rotateRight(double speed, double strength) {

        tank.arcadeDrive(speed, strength);

    }
}

